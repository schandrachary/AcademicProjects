N-body problem: OpemMP parallelization.
Source code:
#include <X11/Xlib.h> // X11 library headers
#include <X11/Xutil.h>
#include <X11/Xos.h>
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <sys/time.h>
#define N 8
#define T 100
#define G 100
#define X_RESN 1000 /* x resolution */
#define Y_RESN 1000 /* y resolution */
int main (int argc, char *argv[])
{
omp_set_num_threads(8);//set number of threads here
double start, end; // used for timing
Window win; /* initialization for a window */
unsigned int width, height, /* window size */
win_x,win_y, /* window position */
border_width, /* border width in pixels */
display_width, display_height, /* size of screen */
screen; /* which screen */
int q;
char *window_name = "My graphics program", *display_name = NULL;
GC gc;
unsigned long valuemask = 0;
XGCValues values;
Display *display;
//XArc *arcs;
XSizeHints size_hints;
Pixmap bitmap;
XPoint points[800];
FILE *fp, *fopen();
char str[100];
XSetWindowAttributes attr[1];
if ( (display = XOpenDisplay (display_name)) == NULL ) { /* connect to Xserver */
fprintf (stderr, "Cannot connect to X server %s\n",XDisplayName (display_name) );
exit (-1);
}
screen = DefaultScreen (display); /* get screen size */
display_width = DisplayWidth (display, screen);
display_height = DisplayHeight (display, screen);
width = X_RESN; /* set window size */
height = Y_RESN;
win_x = 0; win_y = 0; /* set window position */
border_width = 4; /* create opaque window */
win = XCreateSimpleWindow (display, RootWindow (display, screen),
win_x, win_y, width, height, border_width,
BlackPixel (display, screen), WhitePixel (display, screen));
size_hints.flags = USPosition|USSize;
size_hints.x = win_x;
size_hints.y = win_y;
size_hints.width = width;
size_hints.height = height;
size_hints.min_width = 300;
size_hints.min_height = 300;
XSetNormalHints (display, win, &size_hints);
XStoreName(display, win, window_name);
gc = XCreateGC (display, win, valuemask, &values); /* create graphics context */
XSetBackground (display, gc, WhitePixel (display, screen));
XSetForeground (display, gc, BlackPixel (display, screen));
XSetLineAttributes (display, gc, 1, LineSolid, CapRound, JoinRound);
attr[0].backing_store = Always;
attr[0].backing_planes = 1;
attr[0].backing_pixel = BlackPixel(display, screen);
XChangeWindowAttributes(display, win, CWBackingStore | CWBackingPlanes | CWBackingPixel, attr);
XMapWindow (display, win);
XSync(display, 0);
///////////////////////////////////////////////////////////////////////////
//End of graphocs function//////////////////////
int i, j, k, t, x, error =0;
float a[N][7], vx[N], vy[N], xx[N], xy[N], Fx[N], Fy[N], dt, x_diff, y_diff, r, F, m, vxNew[N],
vyNew[N], xxNew[N], xyNew[N];
char *usage = "Usage: %s file\n";
FILE *fd;
FILE *dest;
char outputFile[] = "out.list";
dt = 0.6;
double elapsed_time, start_time, end_time;
struct timeval tv1, tv2;
if (argc< 2) {
fprintf (stderr, usage, argv[0]);
error = -1;
}
if ((fd =fopen (argv[1], "r")) == NULL) {
fprintf (stderr, "%s: Cannot open file %s for reading.\n",argv[0], argv[1]);
fprintf (stderr, usage, argv[0]);
error = -1;
}
if ((dest = fopen (outputFile, "w")) == NULL) {
fprintf (stderr, "%s: Cannot open file %s for reading.\n",
argv[0], argv[1]);
fprintf (stderr, usage, argv[0]);
error = -1;
}
#pragma omp for schedule(static,1)
for (i = 0; i< N; i++)
for (j = 0; j < 6; j++)
fscanf (fd, "%f", &a[i][j]);
//printf("The input file is:\n %f", a[i][j]);
fprintf(dest,"The input file is:\n");
#pragma omp for schedule(static,1)
for (i = 0; i< N; i++){
for (j = 0; j < 6; j++){
fprintf (dest,"%f \t", a[i][j]);
}
fprintf(dest,"\n");
}
//initialize positions and velocities
#pragma omp for schedule(static,1)
for (i = 0; i< N; i++){
vx[i]=a[i][4];
vy[i]=a[i][5];
xx[i]=a[i][2];
xy[i]=a[i][3];
}
// CALCULATIONS
start = omp_get_wtime(); //start time measurement
#pragma omp for schedule(static,1)
for (t = 0; t < T; t++) { // for each time period
//#pragma omp parallel for
for (x = 0; x < N; x++) { // for body x, calculate force on body due to other bodies
for (i = 0; i < N; i++) {
if (x != i) { // for different bodies
x_diff = (a[i][2] - a[x][2]);
y_diff = (a[i][3] - a[x][3]);
r = sqrt((x_diff*x_diff)+(y_diff*y_diff));
F = (G*a[x][1]*a[i][1])/(r*r);
//fprintf(dest,"of body %d is %f \n",x,F);
Fx[x] += F*(x_diff/r);
Fy[x] += F*(y_diff/r);
}
}
}
XSync(display,0);
XClearWindow(display, win);
XSetForeground(display,gc,(long) 0xDC143C); // color of foreground (object to be drawn)
//usleep(200000);
XDrawPoint (display, win, gc, a[i][2], a[i][3]); // draw point at location x, y in window
#pragma omp parallel for
for(q=0;q<N;q++)
XFillArc(display, win, gc, a[q][2], a[q][3], 45, 45, 23040, 360*64); // draw arc/circle
//FillArcs(display,win,gc,arcs,8);
XFlush (display);
//sleep(1/2);
usleep(20000);
#pragma omp parallel for
for (i = 0; i < N; i++) {
//Update the table
m=a[i][1];
vxNew[i]=vx[i]+Fx[i]*(dt/m);
vyNew[i]=vy[i]+Fy[i]*(dt/m);
xxNew[i]=xx[i]+vxNew[i]*dt;
xyNew[i]=xy[i]+vyNew[i]*dt;
a[i][4] = vxNew[i];
a[i][5] = vyNew[i];
a[i][2] = xxNew[i];
a[i][3] = xyNew[i];
}
}
//end time period
end = omp_get_wtime(); //end time measurement
printf("Time of computation: %f\n", end-start);
}// end main



Demonstration Video URL: http://www.youtube.com/watch?v=3YWZlXflaDA&feature=youtu.be
